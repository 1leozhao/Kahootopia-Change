{"ast":null,"code":"var _jsxFileName = \"/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container, LinearProgress } from '@mui/material';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport Question from './Question';\nimport Result from './Result';\n\n// Create audio objects for each sound\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#46178f' // Kahoot-like purple for primary elements\n    },\n    secondary: {\n      main: '#FFC300' // Soft yellow for buttons and highlights\n    },\n    success: {\n      main: '#43B929' // Green for correct answers\n    },\n    background: {\n      default: '#A500B5',\n      // Background color for the app\n      paper: '#FFFFFF' // Background color for cards\n    }\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    // Set Montserrat as the primary font\n    h4: {\n      fontFamily: '\"Montserrat\", sans-serif',\n      fontWeight: 700\n    },\n    h6: {\n      fontFamily: '\"Montserrat\", sans-serif',\n      fontWeight: 600\n    }\n  }\n});\n\n// Styled container for the main content\nconst StyledContainer = styled(Container)(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n}));\n_c = StyledContainer;\nconst Game = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState(null);\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timer, setTimer] = useState(10);\n  const [intervalId, setIntervalId] = useState(null);\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n  }, []);\n  const playSound = useCallback(sound => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n  const startTimer = useCallback(() => {\n    setTimer(10);\n    const id = setInterval(() => {\n      setTimer(prevTimer => {\n        if (prevTimer <= 1) {\n          clearInterval(id);\n          handleAnswer(''); // Submit empty answer when time's up\n          return 0;\n        }\n        return prevTimer - 1;\n      });\n    }, 1000);\n    setIntervalId(id);\n  }, []);\n  const stopTimer = useCallback(() => {\n    if (intervalId) {\n      clearInterval(intervalId);\n    }\n  }, [intervalId]);\n  const handleStartGame = async () => {\n    const {\n      totalRounds\n    } = await startGame();\n    setTotalRounds(totalRounds);\n    setGameStarted(true);\n    setScore(0);\n    fetchQuestion();\n  };\n  const fetchQuestion = async () => {\n    const data = await getQuestion();\n    setQuestionData(data);\n    setResult(null);\n    startTimer();\n  };\n  const calculatePoints = timeLeft => {\n    return Math.round(timeLeft / 10 * 1000);\n  };\n  const handleAnswer = async answer => {\n    stopTimer();\n    const points = calculatePoints(timer);\n    const response = await submitAnswer(answer);\n    let earnedPoints = 0;\n    if (response.isCorrect) {\n      earnedPoints = points;\n      setScore(prevScore => prevScore + points);\n      playSound(correctSound);\n    } else {\n      playSound(incorrectSound);\n    }\n    setResult({\n      ...response,\n      points: earnedPoints\n    });\n    if (response.gameOver) {\n      playSound(gameOverSound);\n      const finalScore = score + (response.isCorrect ? earnedPoints : 0);\n      if (finalScore > highScore) {\n        setHighScore(finalScore);\n        localStorage.setItem('highScore', finalScore.toString());\n      }\n    } else {\n      setTimeout(fetchQuestion, 2000);\n    }\n  };\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: '100vh',\n        backgroundColor: 'primary.main',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'cover'\n      },\n      children: /*#__PURE__*/_jsxDEV(StyledContainer, {\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          align: \"center\",\n          color: \"primary\",\n          children: \"Geography Trivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), gameStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n            variant: \"determinate\",\n            value: score / (totalRounds * 1000) * 100,\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            align: \"center\",\n            gutterBottom: true,\n            children: [\"Time left: \", timer, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), !gameStarted ? /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"High Score: \", highScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleStartGame,\n            size: \"large\",\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            align: \"center\",\n            children: [\"Score: \", score, \" / \", totalRounds * 1000]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this), questionData && !result && /*#__PURE__*/_jsxDEV(Question, {\n            data: questionData,\n            onAnswer: handleAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this), result && /*#__PURE__*/_jsxDEV(Result, {\n            result: result,\n            score: score,\n            totalRounds: totalRounds,\n            highScore: highScore,\n            onPlayAgain: handlePlayAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"8OylbvRwpPmGcppI9D7Ia4vNM2Y=\");\n_c2 = Game;\nexport default Game;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledContainer\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ThemeProvider","createTheme","styled","Button","Typography","Box","Container","LinearProgress","startGame","getQuestion","submitAnswer","Question","Result","jsxDEV","_jsxDEV","Fragment","_Fragment","correctSound","Audio","incorrectSound","gameOverSound","theme","palette","primary","main","secondary","success","background","default","paper","typography","fontFamily","h4","fontWeight","h6","StyledContainer","backgroundColor","borderRadius","shape","padding","spacing","boxShadow","_c","Game","_s","gameStarted","setGameStarted","questionData","setQuestionData","result","setResult","score","setScore","totalRounds","setTotalRounds","highScore","setHighScore","timer","setTimer","intervalId","setIntervalId","storedHighScore","localStorage","getItem","parseInt","playSound","sound","currentTime","play","startTimer","id","setInterval","prevTimer","clearInterval","handleAnswer","stopTimer","handleStartGame","fetchQuestion","data","calculatePoints","timeLeft","Math","round","answer","points","response","earnedPoints","isCorrect","prevScore","gameOver","finalScore","setItem","toString","setTimeout","handlePlayAgain","children","sx","minHeight","display","alignItems","justifyContent","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","maxWidth","variant","gutterBottom","align","color","fileName","_jsxFileName","lineNumber","columnNumber","value","mb","textAlign","onClick","size","onAnswer","onPlayAgain","_c2","$RefreshReg$"],"sources":["/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container, LinearProgress } from '@mui/material';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport { QuestionData, AnswerResponse } from '../types';\nimport Question from './Question';\nimport Result from './Result';\n\n// Create audio objects for each sound\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#46178f', // Kahoot-like purple for primary elements\n    },\n    secondary: {\n      main: '#FFC300', // Soft yellow for buttons and highlights\n    },\n    success: {\n      main: '#43B929', // Green for correct answers\n    },\n    background: {\n      default: '#A500B5', // Background color for the app\n      paper: '#FFFFFF', // Background color for cards\n    },\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif', // Set Montserrat as the primary font\n    h4: {\n      fontFamily: '\"Montserrat\", sans-serif',\n      fontWeight: 700,\n    },\n    h6: {\n      fontFamily: '\"Montserrat\", sans-serif',\n      fontWeight: 600,\n    },\n  },\n});\n\n// Styled container for the main content\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n}));\n\nconst Game: React.FC = () => {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState<QuestionData | null>(null);\n  const [result, setResult] = useState<AnswerResponse | null>(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timer, setTimer] = useState(10);\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n  }, []);\n\n  const playSound = useCallback((sound: HTMLAudioElement) => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n\n  const startTimer = useCallback(() => {\n    setTimer(10);\n    const id = setInterval(() => {\n      setTimer((prevTimer) => {\n        if (prevTimer <= 1) {\n          clearInterval(id);\n          handleAnswer(''); // Submit empty answer when time's up\n          return 0;\n        }\n        return prevTimer - 1;\n      });\n    }, 1000);\n    setIntervalId(id);\n  }, []);\n\n  const stopTimer = useCallback(() => {\n    if (intervalId) {\n      clearInterval(intervalId);\n    }\n  }, [intervalId]);\n\n  const handleStartGame = async () => {\n    const { totalRounds } = await startGame();\n    setTotalRounds(totalRounds);\n    setGameStarted(true);\n    setScore(0);\n    fetchQuestion();\n  };\n\n  const fetchQuestion = async () => {\n    const data = await getQuestion();\n    setQuestionData(data);\n    setResult(null);\n    startTimer();\n  };\n\n  const calculatePoints = (timeLeft: number): number => {\n    return Math.round((timeLeft / 10) * 1000);\n  };\n\n  const handleAnswer = async (answer: string) => {\n    stopTimer();\n    const points = calculatePoints(timer);\n    const response = await submitAnswer(answer);\n    \n    let earnedPoints = 0;\n    if (response.isCorrect) {\n      earnedPoints = points;\n      setScore((prevScore) => prevScore + points);\n      playSound(correctSound);\n    } else {\n      playSound(incorrectSound);\n    }\n    \n    setResult({ ...response, points: earnedPoints });\n  \n    if (response.gameOver) {\n      playSound(gameOverSound);\n      const finalScore = score + (response.isCorrect ? earnedPoints : 0);\n      if (finalScore > highScore) {\n        setHighScore(finalScore);\n        localStorage.setItem('highScore', finalScore.toString());\n      }\n    } else {\n      setTimeout(fetchQuestion, 2000);\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box \n        sx={{ \n          minHeight: '100vh', \n          backgroundColor: 'primary.main',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n        }}\n      >\n        <StyledContainer maxWidth=\"sm\">\n          <Typography variant=\"h4\" gutterBottom align=\"center\" color=\"primary\">\n            Geography Trivia\n          </Typography>\n          {gameStarted && (\n            <>\n              <LinearProgress \n                variant=\"determinate\" \n                value={(score / (totalRounds * 1000)) * 100} \n                sx={{ mb: 2 }}\n              />\n              <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                Time left: {timer}s\n              </Typography>\n            </>\n          )}\n          {!gameStarted ? (\n            <Box textAlign=\"center\">\n              <Typography variant=\"h6\" gutterBottom>\n                High Score: {highScore}\n              </Typography>\n              <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={handleStartGame}\n                size=\"large\"\n              >\n                Start Game\n              </Button>\n            </Box>\n          ) : (\n            <>\n              <Typography variant=\"h6\" gutterBottom align=\"center\">\n                Score: {score} / {totalRounds * 1000}\n              </Typography>\n              {questionData && !result && (\n                <Question data={questionData} onAnswer={handleAnswer} />\n              )}\n              {result && (\n                <Result\n                  result={result}\n                  score={score}\n                  totalRounds={totalRounds}\n                  highScore={highScore}\n                  onPlayAgain={handlePlayAgain}\n                />\n              )}\n            </>\n          )}\n        </StyledContainer>\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default Game;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,aAAa,EAAEC,WAAW,EAAEC,MAAM,QAAQ,sBAAsB;AACzE,SAASC,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,cAAc,QAAQ,eAAe;AAClF,SAASC,SAAS,EAAEC,WAAW,EAAEC,YAAY,QAAQ,QAAQ;AAE7D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,YAAY,GAAG,IAAIC,KAAK,CAAC,qBAAqB,CAAC;AACrD,MAAMC,cAAc,GAAG,IAAID,KAAK,CAAC,uBAAuB,CAAC;AACzD,MAAME,aAAa,GAAG,IAAIF,KAAK,CAAC,uBAAuB,CAAC;;AAExD;AACA,MAAMG,KAAK,GAAGpB,WAAW,CAAC;EACxBqB,OAAO,EAAE;IACPC,OAAO,EAAE;MACPC,IAAI,EAAE,SAAS,CAAE;IACnB,CAAC;IACDC,SAAS,EAAE;MACTD,IAAI,EAAE,SAAS,CAAE;IACnB,CAAC;IACDE,OAAO,EAAE;MACPF,IAAI,EAAE,SAAS,CAAE;IACnB,CAAC;IACDG,UAAU,EAAE;MACVC,OAAO,EAAE,SAAS;MAAE;MACpBC,KAAK,EAAE,SAAS,CAAE;IACpB;EACF,CAAC;EACDC,UAAU,EAAE;IACVC,UAAU,EAAE,0DAA0D;IAAE;IACxEC,EAAE,EAAE;MACFD,UAAU,EAAE,0BAA0B;MACtCE,UAAU,EAAE;IACd,CAAC;IACDC,EAAE,EAAE;MACFH,UAAU,EAAE,0BAA0B;MACtCE,UAAU,EAAE;IACd;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAME,eAAe,GAAGjC,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC;EAAEe;AAAM,CAAC,MAAM;EACxDe,eAAe,EAAEf,KAAK,CAACC,OAAO,CAACK,UAAU,CAACE,KAAK;EAC/CQ,YAAY,EAAEhB,KAAK,CAACiB,KAAK,CAACD,YAAY;EACtCE,OAAO,EAAElB,KAAK,CAACmB,OAAO,CAAC,CAAC,CAAC;EACzBC,SAAS,EAAE;AACb,CAAC,CAAC,CAAC;AAACC,EAAA,GALEP,eAAe;AAOrB,MAAMQ,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAsB,IAAI,CAAC;EAC3E,MAAM,CAACoD,MAAM,EAAEC,SAAS,CAAC,GAAGrD,QAAQ,CAAwB,IAAI,CAAC;EACjE,MAAM,CAACsD,KAAK,EAAEC,QAAQ,CAAC,GAAGvD,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACwD,WAAW,EAAEC,cAAc,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAAC0D,SAAS,EAAEC,YAAY,CAAC,GAAG3D,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC4D,KAAK,EAAEC,QAAQ,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC8D,UAAU,EAAEC,aAAa,CAAC,GAAG/D,QAAQ,CAAwB,IAAI,CAAC;EAEzEC,SAAS,CAAC,MAAM;IACd,MAAM+D,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACzD,IAAIF,eAAe,EAAE;MACnBL,YAAY,CAACQ,QAAQ,CAACH,eAAe,EAAE,EAAE,CAAC,CAAC;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,SAAS,GAAGlE,WAAW,CAAEmE,KAAuB,IAAK;IACzDA,KAAK,CAACC,WAAW,GAAG,CAAC;IACrBD,KAAK,CAACE,IAAI,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGtE,WAAW,CAAC,MAAM;IACnC2D,QAAQ,CAAC,EAAE,CAAC;IACZ,MAAMY,EAAE,GAAGC,WAAW,CAAC,MAAM;MAC3Bb,QAAQ,CAAEc,SAAS,IAAK;QACtB,IAAIA,SAAS,IAAI,CAAC,EAAE;UAClBC,aAAa,CAACH,EAAE,CAAC;UACjBI,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;UAClB,OAAO,CAAC;QACV;QACA,OAAOF,SAAS,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC;IACRZ,aAAa,CAACU,EAAE,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,SAAS,GAAG5E,WAAW,CAAC,MAAM;IAClC,IAAI4D,UAAU,EAAE;MACdc,aAAa,CAACd,UAAU,CAAC;IAC3B;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,MAAM;MAAEvB;IAAY,CAAC,GAAG,MAAM7C,SAAS,CAAC,CAAC;IACzC8C,cAAc,CAACD,WAAW,CAAC;IAC3BP,cAAc,CAAC,IAAI,CAAC;IACpBM,QAAQ,CAAC,CAAC,CAAC;IACXyB,aAAa,CAAC,CAAC;EACjB,CAAC;EAED,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,MAAMC,IAAI,GAAG,MAAMrE,WAAW,CAAC,CAAC;IAChCuC,eAAe,CAAC8B,IAAI,CAAC;IACrB5B,SAAS,CAAC,IAAI,CAAC;IACfmB,UAAU,CAAC,CAAC;EACd,CAAC;EAED,MAAMU,eAAe,GAAIC,QAAgB,IAAa;IACpD,OAAOC,IAAI,CAACC,KAAK,CAAEF,QAAQ,GAAG,EAAE,GAAI,IAAI,CAAC;EAC3C,CAAC;EAED,MAAMN,YAAY,GAAG,MAAOS,MAAc,IAAK;IAC7CR,SAAS,CAAC,CAAC;IACX,MAAMS,MAAM,GAAGL,eAAe,CAACtB,KAAK,CAAC;IACrC,MAAM4B,QAAQ,GAAG,MAAM3E,YAAY,CAACyE,MAAM,CAAC;IAE3C,IAAIG,YAAY,GAAG,CAAC;IACpB,IAAID,QAAQ,CAACE,SAAS,EAAE;MACtBD,YAAY,GAAGF,MAAM;MACrBhC,QAAQ,CAAEoC,SAAS,IAAKA,SAAS,GAAGJ,MAAM,CAAC;MAC3CnB,SAAS,CAAChD,YAAY,CAAC;IACzB,CAAC,MAAM;MACLgD,SAAS,CAAC9C,cAAc,CAAC;IAC3B;IAEA+B,SAAS,CAAC;MAAE,GAAGmC,QAAQ;MAAED,MAAM,EAAEE;IAAa,CAAC,CAAC;IAEhD,IAAID,QAAQ,CAACI,QAAQ,EAAE;MACrBxB,SAAS,CAAC7C,aAAa,CAAC;MACxB,MAAMsE,UAAU,GAAGvC,KAAK,IAAIkC,QAAQ,CAACE,SAAS,GAAGD,YAAY,GAAG,CAAC,CAAC;MAClE,IAAII,UAAU,GAAGnC,SAAS,EAAE;QAC1BC,YAAY,CAACkC,UAAU,CAAC;QACxB5B,YAAY,CAAC6B,OAAO,CAAC,WAAW,EAAED,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC;MAC1D;IACF,CAAC,MAAM;MACLC,UAAU,CAAChB,aAAa,EAAE,IAAI,CAAC;IACjC;EACF,CAAC;EAED,MAAMiB,eAAe,GAAGA,CAAA,KAAM;IAC5BhD,cAAc,CAAC,KAAK,CAAC;IACrBE,eAAe,CAAC,IAAI,CAAC;IACrBE,SAAS,CAAC,IAAI,CAAC;IACfE,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAED,oBACEtC,OAAA,CAACd,aAAa;IAACqB,KAAK,EAAEA,KAAM;IAAA0E,QAAA,eAC1BjF,OAAA,CAACT,GAAG;MACF2F,EAAE,EAAE;QACFC,SAAS,EAAE,OAAO;QAClB7D,eAAe,EAAE,cAAc;QAC/B8D,OAAO,EAAE,MAAM;QACfC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAE,sCAAsC;QACvDC,gBAAgB,EAAE,WAAW;QAC7BC,kBAAkB,EAAE,QAAQ;QAC5BC,cAAc,EAAE;MAClB,CAAE;MAAAT,QAAA,eAEFjF,OAAA,CAACqB,eAAe;QAACsE,QAAQ,EAAC,IAAI;QAAAV,QAAA,gBAC5BjF,OAAA,CAACV,UAAU;UAACsG,OAAO,EAAC,IAAI;UAACC,YAAY;UAACC,KAAK,EAAC,QAAQ;UAACC,KAAK,EAAC,SAAS;UAAAd,QAAA,EAAC;QAErE;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EACZpE,WAAW,iBACV/B,OAAA,CAAAE,SAAA;UAAA+E,QAAA,gBACEjF,OAAA,CAACP,cAAc;YACbmG,OAAO,EAAC,aAAa;YACrBQ,KAAK,EAAG/D,KAAK,IAAIE,WAAW,GAAG,IAAI,CAAC,GAAI,GAAI;YAC5C2C,EAAE,EAAE;cAAEmB,EAAE,EAAE;YAAE;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC,eACFnG,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,IAAI;YAACE,KAAK,EAAC,QAAQ;YAACD,YAAY;YAAAZ,QAAA,GAAC,aACxC,EAACtC,KAAK,EAAC,GACpB;UAAA;YAAAqD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA,eACb,CACH,EACA,CAACpE,WAAW,gBACX/B,OAAA,CAACT,GAAG;UAAC+G,SAAS,EAAC,QAAQ;UAAArB,QAAA,gBACrBjF,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,IAAI;YAACC,YAAY;YAAAZ,QAAA,GAAC,cACxB,EAACxC,SAAS;UAAA;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACZ,CAAC,eACbnG,OAAA,CAACX,MAAM;YACLuG,OAAO,EAAC,WAAW;YACnBG,KAAK,EAAC,WAAW;YACjBQ,OAAO,EAAEzC,eAAgB;YACzB0C,IAAI,EAAC,OAAO;YAAAvB,QAAA,EACb;UAED;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,gBAENnG,OAAA,CAAAE,SAAA;UAAA+E,QAAA,gBACEjF,OAAA,CAACV,UAAU;YAACsG,OAAO,EAAC,IAAI;YAACC,YAAY;YAACC,KAAK,EAAC,QAAQ;YAAAb,QAAA,GAAC,SAC5C,EAAC5C,KAAK,EAAC,KAAG,EAACE,WAAW,GAAG,IAAI;UAAA;YAAAyD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,EACZlE,YAAY,IAAI,CAACE,MAAM,iBACtBnC,OAAA,CAACH,QAAQ;YAACmE,IAAI,EAAE/B,YAAa;YAACwE,QAAQ,EAAE7C;UAAa;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CACxD,EACAhE,MAAM,iBACLnC,OAAA,CAACF,MAAM;YACLqC,MAAM,EAAEA,MAAO;YACfE,KAAK,EAAEA,KAAM;YACbE,WAAW,EAAEA,WAAY;YACzBE,SAAS,EAAEA,SAAU;YACrBiE,WAAW,EAAE1B;UAAgB;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CACF;QAAA,eACD,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACc;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEpB,CAAC;AAACrE,EAAA,CArKID,IAAc;AAAA8E,GAAA,GAAd9E,IAAc;AAuKpB,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAA+E,GAAA;AAAAC,YAAA,CAAAhF,EAAA;AAAAgF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}