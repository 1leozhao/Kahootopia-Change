{"ast":null,"code":"var _jsxFileName = \"/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container, CssBaseline } from '@mui/material';\nimport axios from 'axios';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport Question from './Question';\nimport Result from './Result';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// Create audio objects for each sound\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\nconst backgroundMusicAudio = new Audio('/sounds/background-music.mp3');\nbackgroundMusicAudio.loop = true;\nconst [selectedQuestionTypes, setSelectedQuestionTypes] = useState({\n  capital: true,\n  population: true,\n  region: true,\n  language: true\n});\nconst handleQuestionTypeChange = event => {\n  setSelectedQuestionTypes({\n    ...selectedQuestionTypes,\n    [event.target.name]: event.target.checked\n  });\n};\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#46178f'\n    },\n    secondary: {\n      main: '#FFC300'\n    },\n    success: {\n      main: '#43B929'\n    },\n    background: {\n      default: '#46178f',\n      paper: '#FFFFFF'\n    }\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", sans-serif',\n    allVariants: {\n      fontFamily: '\"Montserrat\", sans-serif'\n    },\n    h4: {\n      fontWeight: 700\n    },\n    h6: {\n      fontWeight: 600\n    },\n    button: {\n      fontWeight: 600\n    }\n  },\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: `\n        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');\n        body {\n          font-family: 'Montserrat', sans-serif;\n        }\n      `\n    }\n  }\n});\nconst StyledContainer = styled(Container)(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n}));\n_c = StyledContainer;\nconst Game = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState(null);\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const totalTime = 10;\n  const [achievements, setAchievements] = useState(() => {\n    const storedAchievements = localStorage.getItem('achievements');\n    if (storedAchievements) {\n      return JSON.parse(storedAchievements);\n    }\n    return [{\n      id: 'max_points',\n      name: 'In The Air',\n      description: 'Answer a question for maximum points',\n      unlocked: false\n    }, {\n      id: 'all_correct',\n      name: 'Hot',\n      description: 'Answer every question correctly in a single game',\n      unlocked: false\n    }, {\n      id: 'high_score',\n      name: 'Flawlëss',\n      description: 'Achieve a score of 10,000 points',\n      unlocked: false\n    }];\n  });\n  const playBackgroundMusic = useCallback(() => {\n    backgroundMusicAudio.play();\n  }, []);\n  const stopBackgroundMusic = useCallback(() => {\n    backgroundMusicAudio.pause();\n    backgroundMusicAudio.currentTime = 0;\n  }, []);\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n    return () => {\n      stopBackgroundMusic();\n    };\n  }, [stopBackgroundMusic]);\n  useEffect(() => {\n    let timer;\n    if (gameStarted && questionData && !result) {\n      timer = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            handleAnswer('');\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [gameStarted, questionData, result]);\n  const playSound = useCallback(sound => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n  const saveAchievements = useCallback(newAchievements => {\n    localStorage.setItem('achievements', JSON.stringify(newAchievements));\n  }, []);\n  const checkAchievements = useCallback(() => {\n    const newAchievements = [...achievements];\n    let achievementsChanged = false;\n    if (result && result.points === 1000 && !newAchievements.find(a => a.id === 'max_points').unlocked) {\n      newAchievements.find(a => a.id === 'max_points').unlocked = true;\n      achievementsChanged = true;\n    }\n    if (result && result.gameOver && score === totalRounds * 1000 && !newAchievements.find(a => a.id === 'all_correct').unlocked) {\n      newAchievements.find(a => a.id === 'all_correct').unlocked = true;\n      achievementsChanged = true;\n    }\n    if (score == 10000 && !newAchievements.find(a => a.id === 'high_score').unlocked) {\n      newAchievements.find(a => a.id === 'high_score').unlocked = true;\n      achievementsChanged = true;\n    }\n    if (achievementsChanged) {\n      setAchievements(newAchievements);\n      saveAchievements(newAchievements);\n    }\n  }, [achievements, result, score, totalRounds, saveAchievements]);\n  useEffect(() => {\n    checkAchievements();\n  }, [checkAchievements, result, score, saveAchievements]);\n  const handleStartGame = async () => {\n    try {\n      const {\n        totalRounds\n      } = await startGame(selectedQuestionTypes);\n      setTotalRounds(totalRounds);\n      setGameStarted(true);\n      setScore(0);\n      playBackgroundMusic();\n      fetchQuestion();\n    } catch (error) {\n      console.error('Error starting game:', error);\n    }\n  };\n  const fetchQuestion = async () => {\n    try {\n      const data = await getQuestion();\n      setQuestionData(data);\n      setResult(null);\n      setTimeLeft(totalTime);\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching question:', error);\n      if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 400) {\n        console.warn('Game might be over or there was an issue fetching the next question.');\n        setResult({\n          isCorrect: false,\n          correctAnswer: '',\n          gameOver: true,\n          points: 0,\n          score: score,\n          totalScore: score\n        });\n      }\n    }\n  };\n  const calculatePoints = timeLeft => {\n    return Math.round(timeLeft / totalTime * 1000);\n  };\n  const handleAnswer = async answer => {\n    if (result !== null && result !== void 0 && result.gameOver) {\n      console.warn('Game is already over. Cannot submit more answers.');\n      return;\n    }\n    const points = calculatePoints(timeLeft);\n    try {\n      const response = await submitAnswer(answer);\n      let earnedPoints = 0;\n      if (response.isCorrect) {\n        earnedPoints = points;\n        setScore(prevScore => prevScore + points);\n        playSound(correctSound);\n      } else {\n        playSound(incorrectSound);\n      }\n      setResult({\n        ...response,\n        points: earnedPoints\n      });\n      if (response.gameOver) {\n        playSound(gameOverSound);\n        const finalScore = score + earnedPoints;\n        if (finalScore > highScore) {\n          setHighScore(finalScore);\n          localStorage.setItem('highScore', finalScore.toString());\n        }\n      } else {\n        setTimeout(fetchQuestion, 2000);\n      }\n      checkAchievements();\n    } catch (error) {\n      var _error$response2;\n      console.error('Error submitting answer:', error);\n      if (axios.isAxiosError(error) && ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400) {\n        console.warn('Game might be over or there was an issue with the answer submission.');\n        setResult({\n          isCorrect: false,\n          correctAnswer: '',\n          gameOver: true,\n          points: 0,\n          score: score,\n          totalScore: score\n        });\n      }\n    }\n  };\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n    stopBackgroundMusic();\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: '100vh',\n        backgroundColor: 'primary.main',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'cover'\n      },\n      children: /*#__PURE__*/_jsxDEV(StyledContainer, {\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          align: \"center\",\n          color: \"primary\",\n          children: \"Geography Trivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"High Score: \", highScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleStartGame,\n            size: \"large\",\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Select Question Types:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexWrap: \"wrap\",\n              children: Object.entries(selectedQuestionTypes).map(([type, checked]) => /*#__PURE__*/_jsxDEV(Box, {\n                mx: 1,\n                my: 1,\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    name: type,\n                    checked: checked,\n                    onChange: handleQuestionTypeChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 15\n                  }, this), type.charAt(0).toUpperCase() + type.slice(1)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 13\n                }, this)\n              }, type, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 11\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 3\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            align: \"center\",\n            children: [\"Score: \", score]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), questionData && !result && /*#__PURE__*/_jsxDEV(Question, {\n            data: questionData,\n            onAnswer: handleAnswer,\n            timeLeft: timeLeft,\n            totalTime: totalTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this), result && /*#__PURE__*/_jsxDEV(Result, {\n            result: result,\n            score: score,\n            totalRounds: totalRounds,\n            highScore: highScore,\n            onPlayAgain: handlePlayAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"SpPY6eYYvESpBvjHtj+ioh0UCCU=\");\n_c2 = Game;\nexport default Game;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledContainer\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ThemeProvider","createTheme","styled","Button","Typography","Box","Container","CssBaseline","axios","startGame","getQuestion","submitAnswer","Question","Result","jsxDEV","_jsxDEV","Fragment","_Fragment","correctSound","Audio","incorrectSound","gameOverSound","backgroundMusicAudio","loop","selectedQuestionTypes","setSelectedQuestionTypes","capital","population","region","language","handleQuestionTypeChange","event","target","name","checked","theme","palette","primary","main","secondary","success","background","default","paper","typography","fontFamily","allVariants","h4","fontWeight","h6","button","components","MuiCssBaseline","styleOverrides","StyledContainer","backgroundColor","borderRadius","shape","padding","spacing","boxShadow","_c","Game","_s","gameStarted","setGameStarted","questionData","setQuestionData","result","setResult","score","setScore","totalRounds","setTotalRounds","highScore","setHighScore","timeLeft","setTimeLeft","totalTime","achievements","setAchievements","storedAchievements","localStorage","getItem","JSON","parse","id","description","unlocked","playBackgroundMusic","play","stopBackgroundMusic","pause","currentTime","storedHighScore","parseInt","timer","setInterval","prevTime","clearInterval","handleAnswer","playSound","sound","saveAchievements","newAchievements","setItem","stringify","checkAchievements","achievementsChanged","points","find","a","gameOver","handleStartGame","fetchQuestion","error","console","data","_error$response","isAxiosError","response","status","warn","isCorrect","correctAnswer","totalScore","calculatePoints","Math","round","answer","earnedPoints","prevScore","finalScore","toString","setTimeout","_error$response2","handlePlayAgain","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","minHeight","display","alignItems","justifyContent","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","maxWidth","variant","gutterBottom","align","color","textAlign","onClick","size","mt","flexWrap","Object","entries","map","type","mx","my","onChange","charAt","toUpperCase","slice","onAnswer","onPlayAgain","_c2","$RefreshReg$"],"sources":["/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container, CssBaseline } from '@mui/material';\nimport axios from 'axios';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport { QuestionData, AnswerResponse } from '../types';\nimport Question from './Question';\nimport Result from './Result';\nimport Achievements, { Achievement } from './Achievements';\n\n// Create audio objects for each sound\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\nconst backgroundMusicAudio = new Audio('/sounds/background-music.mp3');\nbackgroundMusicAudio.loop = true;\n\nconst [selectedQuestionTypes, setSelectedQuestionTypes] = useState({\n  capital: true,\n  population: true,\n  region: true,\n  language: true,\n});\n\nconst handleQuestionTypeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  setSelectedQuestionTypes({\n    ...selectedQuestionTypes,\n    [event.target.name]: event.target.checked,\n  });\n};\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#46178f',\n    },\n    secondary: {\n      main: '#FFC300',\n    },\n    success: {\n      main: '#43B929',\n    },\n    background: {\n      default: '#46178f',\n      paper: '#FFFFFF',\n    },\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", sans-serif',\n    allVariants: {\n      fontFamily: '\"Montserrat\", sans-serif',\n    },\n    h4: {\n      fontWeight: 700,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n    button: {\n      fontWeight: 600,\n    },\n  },\n  components: {\n    MuiCssBaseline: {\n      styleOverrides: `\n        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');\n        body {\n          font-family: 'Montserrat', sans-serif;\n        }\n      `,\n    },\n  },\n});\n\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n}));\n\nconst Game: React.FC = () => {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState<QuestionData | null>(null);\n  const [result, setResult] = useState<AnswerResponse | null>(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const totalTime = 10;\n\n  const [achievements, setAchievements] = useState<Achievement[]>(() => {\n  const storedAchievements = localStorage.getItem('achievements');\n  if (storedAchievements) {\n    return JSON.parse(storedAchievements);\n  }\n  return [\n    { id: 'max_points', name: 'In The Air', description: 'Answer a question for maximum points', unlocked: false },\n    { id: 'all_correct', name: 'Hot', description: 'Answer every question correctly in a single game', unlocked: false },\n    { id: 'high_score', name: 'Flawlëss', description: 'Achieve a score of 10,000 points', unlocked: false },\n  ];\n});\n\n  const playBackgroundMusic = useCallback(() => {\n    backgroundMusicAudio.play();\n  }, []);\n\n  const stopBackgroundMusic = useCallback(() => {\n    backgroundMusicAudio.pause();\n    backgroundMusicAudio.currentTime = 0;\n  }, []);\n\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n\n    return () => {\n      stopBackgroundMusic();\n    };\n  }, [stopBackgroundMusic]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (gameStarted && questionData && !result) {\n      timer = setInterval(() => {\n        setTimeLeft((prevTime) => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            handleAnswer('');\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [gameStarted, questionData, result]);\n\n  const playSound = useCallback((sound: HTMLAudioElement) => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n\n  const saveAchievements = useCallback((newAchievements: Achievement[]) => {\n    localStorage.setItem('achievements', JSON.stringify(newAchievements));\n  }, []);\n\n  const checkAchievements = useCallback(() => {\n    const newAchievements = [...achievements];\n    let achievementsChanged = false;\n  \n    if (result && result.points === 1000 && !newAchievements.find(a => a.id === 'max_points')!.unlocked) {\n      newAchievements.find(a => a.id === 'max_points')!.unlocked = true;\n      achievementsChanged = true;\n    }\n  \n    if (result && result.gameOver && score === totalRounds * 1000 && !newAchievements.find(a => a.id === 'all_correct')!.unlocked) {\n      newAchievements.find(a => a.id === 'all_correct')!.unlocked = true;\n      achievementsChanged = true;\n    }\n  \n    if (score == 10000 && !newAchievements.find(a => a.id === 'high_score')!.unlocked) {\n      newAchievements.find(a => a.id === 'high_score')!.unlocked = true;\n      achievementsChanged = true;\n    }\n  \n    if (achievementsChanged) {\n      setAchievements(newAchievements);\n      saveAchievements(newAchievements);\n    }\n  }, [achievements, result, score, totalRounds, saveAchievements]);\n\n  useEffect(() => {\n    checkAchievements();\n  }, [checkAchievements, result, score, saveAchievements]);\n\n  const handleStartGame = async () => {\n    try {\n      const { totalRounds } = await startGame(selectedQuestionTypes);\n      setTotalRounds(totalRounds);\n      setGameStarted(true);\n      setScore(0);\n      playBackgroundMusic();\n      fetchQuestion();\n    } catch (error) {\n      console.error('Error starting game:', error);\n    }\n  };\n\n  const fetchQuestion = async () => {\n    try {\n      const data = await getQuestion();\n      setQuestionData(data);\n      setResult(null);\n      setTimeLeft(totalTime);\n    } catch (error) {\n      console.error('Error fetching question:', error);\n      if (axios.isAxiosError(error) && error.response?.status === 400) {\n        console.warn('Game might be over or there was an issue fetching the next question.');\n        setResult({\n          isCorrect: false,\n          correctAnswer: '',\n          gameOver: true,\n          points: 0,\n          score: score,\n          totalScore: score,\n        });\n      }\n    }\n  };\n\n  const calculatePoints = (timeLeft: number): number => {\n    return Math.round((timeLeft / totalTime) * 1000);\n  };\n\n  const handleAnswer = async (answer: string) => {\n    if (result?.gameOver) {\n      console.warn('Game is already over. Cannot submit more answers.');\n      return;\n    }\n\n    const points = calculatePoints(timeLeft);\n    \n    try {\n      const response = await submitAnswer(answer);\n      \n      let earnedPoints = 0;\n      if (response.isCorrect) {\n        earnedPoints = points;\n        setScore((prevScore) => prevScore + points);\n        playSound(correctSound);\n      } else {\n        playSound(incorrectSound);\n      }\n      \n      setResult({ ...response, points: earnedPoints });\n\n      if (response.gameOver) {\n        playSound(gameOverSound);\n        const finalScore = score + earnedPoints;\n        if (finalScore > highScore) {\n          setHighScore(finalScore);\n          localStorage.setItem('highScore', finalScore.toString());\n        }\n      } else {\n        setTimeout(fetchQuestion, 2000);\n      }\n\n      checkAchievements();\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n      if (axios.isAxiosError(error) && error.response?.status === 400) {\n        console.warn('Game might be over or there was an issue with the answer submission.');\n        setResult({\n          isCorrect: false,\n          correctAnswer: '',\n          gameOver: true,\n          points: 0,\n          score: score,\n          totalScore: score,\n        });\n      }\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n    stopBackgroundMusic();\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Box \n        sx={{ \n          minHeight: '100vh', \n          backgroundColor: 'primary.main',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n        }}\n      >\n        <StyledContainer maxWidth=\"sm\">\n          <Typography variant=\"h4\" gutterBottom align=\"center\" color=\"primary\">\n            Geography Trivia\n          </Typography>\n          {!gameStarted ? (\n  <Box textAlign=\"center\">\n    <Typography variant=\"h6\" gutterBottom>\n      High Score: {highScore}\n    </Typography>\n    <Button \n      variant=\"contained\" \n      color=\"secondary\" \n      onClick={handleStartGame}\n      size=\"large\"\n    >\n      Start Game\n    </Button>\n    <Box mt={4}>\n      <Typography variant=\"h6\" gutterBottom>\n        Select Question Types:\n      </Typography>\n      <Box display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\n        {Object.entries(selectedQuestionTypes).map(([type, checked]) => (\n          <Box key={type} mx={1} my={1}>\n            <label>\n              <input\n                type=\"checkbox\"\n                name={type}\n                checked={checked}\n                onChange={handleQuestionTypeChange}\n              />\n              {type.charAt(0).toUpperCase() + type.slice(1)}\n            </label>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  </Box>\n) : (\n            <>\n              <Typography variant=\"h6\" gutterBottom align=\"center\">\n                Score: {score}\n              </Typography>\n              {questionData && !result && (\n                <Question \n                  data={questionData} \n                  onAnswer={handleAnswer}\n                  timeLeft={timeLeft}\n                  totalTime={totalTime}\n                />\n              )}\n              {result && (\n                <Result\n                  result={result}\n                  score={score}\n                  totalRounds={totalRounds}\n                  highScore={highScore}\n                  onPlayAgain={handlePlayAgain}\n                />\n              )}\n            </>\n          )}\n        </StyledContainer>\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}