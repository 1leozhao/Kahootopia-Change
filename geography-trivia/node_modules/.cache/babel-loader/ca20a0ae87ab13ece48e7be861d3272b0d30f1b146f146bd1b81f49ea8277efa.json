{"ast":null,"code":"var _jsxFileName = \"/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container } from '@mui/material';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport Question from './Question';\nimport Result from './Result';\n\n// Create audio objects for each sound\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#A500B5' // Kahoot-like purple for primary elements\n    },\n    secondary: {\n      main: '#FFC300' // Soft yellow for buttons and highlights\n    },\n    success: {\n      main: '#43B929' // Green for correct answers\n    },\n    background: {\n      default: '#A500B5',\n      // Background color for the app\n      paper: '#FFFFFF' // Background color for cards\n    }\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    h4: {\n      fontWeight: 700\n    },\n    h6: {\n      fontWeight: 600\n    }\n  }\n});\n\n// Styled container for the main content\nconst StyledContainer = styled(Container)(({\n  theme\n}) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'\n}));\n_c = StyledContainer;\nconst Game = () => {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState(null);\n  const [result, setResult] = useState(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const totalTime = 10; // Total time for each question\n\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n  }, []);\n  useEffect(() => {\n    if (gameStarted && !result) {\n      const timer = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            handleAnswer(''); // Submit empty answer when time's up\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [gameStarted, result]);\n  const playSound = useCallback(sound => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n  const handleStartGame = async () => {\n    const {\n      totalRounds\n    } = await startGame();\n    setTotalRounds(totalRounds);\n    setGameStarted(true);\n    setScore(0);\n    fetchQuestion();\n  };\n  const fetchQuestion = async () => {\n    const data = await getQuestion();\n    setQuestionData(data);\n    setResult(null);\n    setTimeLeft(totalTime);\n  };\n  const calculatePoints = timeLeft => {\n    return Math.round(timeLeft / totalTime * 1000);\n  };\n  const handleAnswer = async answer => {\n    const points = calculatePoints(timeLeft);\n    const response = await submitAnswer(answer);\n    if (response.isCorrect) {\n      setScore(prevScore => prevScore + points);\n      playSound(correctSound);\n    } else {\n      playSound(incorrectSound);\n    }\n    setResult({\n      ...response,\n      points\n    });\n    if (response.gameOver) {\n      playSound(gameOverSound);\n      if (score > highScore) {\n        setHighScore(score);\n        localStorage.setItem('highScore', score.toString());\n      }\n    } else {\n      setTimeout(fetchQuestion, 2000);\n    }\n  };\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        minHeight: '100vh',\n        backgroundColor: 'primary.main',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'cover'\n      },\n      children: /*#__PURE__*/_jsxDEV(StyledContainer, {\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          gutterBottom: true,\n          align: \"center\",\n          color: \"primary\",\n          children: \"Geography Trivia\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(Box, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: [\"High Score: \", highScore]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: handleStartGame,\n            size: \"large\",\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            align: \"center\",\n            children: [\"Score: \", score, \" / \", totalRounds * 1000]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), questionData && !result && /*#__PURE__*/_jsxDEV(Question, {\n            data: questionData,\n            onAnswer: handleAnswer,\n            timeLeft: timeLeft,\n            totalTime: totalTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), result && /*#__PURE__*/_jsxDEV(Result, {\n            result: result,\n            score: score,\n            totalRounds: totalRounds,\n            highScore: highScore,\n            onPlayAgain: handlePlayAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"b535x+7wirc8RP9+LaXiugFvZ2U=\");\n_c2 = Game;\nexport default Game;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledContainer\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ThemeProvider","createTheme","styled","Button","Typography","Box","Container","startGame","getQuestion","submitAnswer","Question","Result","jsxDEV","_jsxDEV","Fragment","_Fragment","correctSound","Audio","incorrectSound","gameOverSound","theme","palette","primary","main","secondary","success","background","default","paper","typography","fontFamily","h4","fontWeight","h6","StyledContainer","backgroundColor","borderRadius","shape","padding","spacing","boxShadow","_c","Game","_s","gameStarted","setGameStarted","questionData","setQuestionData","result","setResult","score","setScore","totalRounds","setTotalRounds","highScore","setHighScore","timeLeft","setTimeLeft","totalTime","storedHighScore","localStorage","getItem","parseInt","timer","setInterval","prevTime","clearInterval","handleAnswer","playSound","sound","currentTime","play","handleStartGame","fetchQuestion","data","calculatePoints","Math","round","answer","points","response","isCorrect","prevScore","gameOver","setItem","toString","setTimeout","handlePlayAgain","children","sx","minHeight","display","alignItems","justifyContent","backgroundImage","backgroundRepeat","backgroundPosition","backgroundSize","maxWidth","variant","gutterBottom","align","color","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","onClick","size","onAnswer","onPlayAgain","_c2","$RefreshReg$"],"sources":["/Users/leozhao/ws/change++/geographygame/geography-trivia/src/components/Game.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ThemeProvider, createTheme, styled } from '@mui/material/styles';\nimport { Button, Typography, Box, Container } from '@mui/material';\nimport { startGame, getQuestion, submitAnswer } from '../api';\nimport { QuestionData, AnswerResponse } from '../types';\nimport Question from './Question';\nimport Result from './Result';\n\n// Create audio objects for each sound\nconst correctSound = new Audio('/sounds/correct.mp3');\nconst incorrectSound = new Audio('/sounds/incorrect.mp3');\nconst gameOverSound = new Audio('/sounds/game-over.mp3');\n\n// Define a custom theme using Material-UI\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#A500B5', // Kahoot-like purple for primary elements\n    },\n    secondary: {\n      main: '#FFC300', // Soft yellow for buttons and highlights\n    },\n    success: {\n      main: '#43B929', // Green for correct answers\n    },\n    background: {\n      default: '#A500B5', // Background color for the app\n      paper: '#FFFFFF', // Background color for cards\n    },\n  },\n  typography: {\n    fontFamily: '\"Montserrat\", \"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    h4: {\n      fontWeight: 700,\n    },\n    h6: {\n      fontWeight: 600,\n    },\n  },\n});\n\n// Styled container for the main content\nconst StyledContainer = styled(Container)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  padding: theme.spacing(3),\n  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n}));\n\nconst Game: React.FC = () => {\n  const [gameStarted, setGameStarted] = useState(false);\n  const [questionData, setQuestionData] = useState<QuestionData | null>(null);\n  const [result, setResult] = useState<AnswerResponse | null>(null);\n  const [score, setScore] = useState(0);\n  const [totalRounds, setTotalRounds] = useState(5);\n  const [highScore, setHighScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const totalTime = 10; // Total time for each question\n\n  useEffect(() => {\n    const storedHighScore = localStorage.getItem('highScore');\n    if (storedHighScore) {\n      setHighScore(parseInt(storedHighScore, 10));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (gameStarted && !result) {\n      const timer = setInterval(() => {\n        setTimeLeft((prevTime) => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            handleAnswer(''); // Submit empty answer when time's up\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [gameStarted, result]);\n\n  const playSound = useCallback((sound: HTMLAudioElement) => {\n    sound.currentTime = 0;\n    sound.play();\n  }, []);\n\n  const handleStartGame = async () => {\n    const { totalRounds } = await startGame();\n    setTotalRounds(totalRounds);\n    setGameStarted(true);\n    setScore(0);\n    fetchQuestion();\n  };\n\n  const fetchQuestion = async () => {\n    const data = await getQuestion();\n    setQuestionData(data);\n    setResult(null);\n    setTimeLeft(totalTime);\n  };\n\n  const calculatePoints = (timeLeft: number): number => {\n    return Math.round((timeLeft / totalTime) * 1000);\n  };\n\n  const handleAnswer = async (answer: string) => {\n    const points = calculatePoints(timeLeft);\n    const response = await submitAnswer(answer);\n    \n    if (response.isCorrect) {\n      setScore((prevScore) => prevScore + points);\n      playSound(correctSound);\n    } else {\n      playSound(incorrectSound);\n    }\n    \n    setResult({ ...response, points });\n\n    if (response.gameOver) {\n      playSound(gameOverSound);\n      if (score > highScore) {\n        setHighScore(score);\n        localStorage.setItem('highScore', score.toString());\n      }\n    } else {\n      setTimeout(fetchQuestion, 2000);\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setGameStarted(false);\n    setQuestionData(null);\n    setResult(null);\n    setScore(0);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box \n        sx={{ \n          minHeight: '100vh', \n          backgroundColor: 'primary.main',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          backgroundImage: 'url(\"/images/world-map-outline.svg\")',\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'center',\n          backgroundSize: 'cover',\n        }}\n      >\n        <StyledContainer maxWidth=\"sm\">\n          <Typography variant=\"h4\" gutterBottom align=\"center\" color=\"primary\">\n            Geography Trivia\n          </Typography>\n          {!gameStarted ? (\n            <Box textAlign=\"center\">\n              <Typography variant=\"h6\" gutterBottom>\n                High Score: {highScore}\n              </Typography>\n              <Button \n                variant=\"contained\" \n                color=\"secondary\" \n                onClick={handleStartGame}\n                size=\"large\"\n              >\n                Start Game\n              </Button>\n            </Box>\n          ) : (\n            <>\n              <Typography variant=\"h6\" gutterBottom align=\"center\">\n                Score: {score} / {totalRounds * 1000}\n              </Typography>\n              {questionData && !result && (\n                <Question \n                  data={questionData} \n                  onAnswer={handleAnswer}\n                  timeLeft={timeLeft}\n                  totalTime={totalTime}\n                />\n              )}\n              {result && (\n                <Result\n                  result={result}\n                  score={score}\n                  totalRounds={totalRounds}\n                  highScore={highScore}\n                  onPlayAgain={handlePlayAgain}\n                />\n              )}\n            </>\n          )}\n        </StyledContainer>\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}